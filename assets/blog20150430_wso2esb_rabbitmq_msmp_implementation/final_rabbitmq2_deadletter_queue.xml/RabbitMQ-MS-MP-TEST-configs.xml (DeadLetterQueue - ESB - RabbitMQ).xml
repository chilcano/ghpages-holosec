 
# RabbitMQ node02
#connectionfactory.myRabbitMQConnFactory0 = amqp://admin:JRq7b1Ct@carbon/DES_DEV?brokerlist='tcp://10.105.135.53:5672'
# RabbitMQ LB
connectionfactory.myRabbitMQConnFactory0 = amqp://admin:JRq7b1Ct@carbon/DES_DEV?brokerlist='tcp://10.105.135.71/:5672'
 
## for RabbitMQ MessageStore
destination.myJNDIRabbitMQDestQueuePublisher0 = BURL:direct://amq.direct//?routingkey='des_rk_queue1'
destination.myJNDIRabbitMQDestQueueConsumer0 = BURL:direct://amq.direct/des_rk_queue1/des_queue1
 
## for RabbitMQ DeadLetterQueue MessageStore
connectionfactory.myRabbitMQDLConnFactory1 = amqp://admin:JRq7b1Ct@carbon/DES_DEV?brokerlist='tcp://10.105.135.71/:5672'
destination.myJNDIRabbitMQDestQueueDLPublisher1 = BURL:direct://amq.direct//?routingkey='des_rk_dl'
destination.myJNDIRabbitMQDestQueueDLConsumer1 = BURL:direct://amq.direct/des_rk_dl/des_queue1_dl
 
## for RabbitMQ TroubleQueue MessageStore
connectionfactory.myRabbitMQDLConnFactory2 = amqp://admin:JRq7b1Ct@carbon/DES_DEV?brokerlist='tcp://10.105.135.71/:5672'
destination.myJNDIRabbitMQDestQueueDLPublisher2 = BURL:direct://amq.direct//?routingkey='des_rk_tb'
destination.myJNDIRabbitMQDestQueueDLConsumer2 = BURL:direct://amq.direct/des_rk_tb/des_queue1_tb
 
 
 
 
 
 
 
<!-- PROXIES TO MESSAGESTORE FOR RABBITMQ-->
 
<!-- RabbitMQProxySenderToMS2 -->
 
<?xml version="1.0" encoding="UTF-8"?>
<proxy xmlns="http://ws.apache.org/ns/synapse"
       name="RabbitMQProxySenderToMS2"
       transports="http"
       statistics="disable"
       trace="disable"
       startOnLoad="true">
   <target>
      <inSequence>
         <log level="custom">
            <property name="[RabbitMQProxySenderToMS2]"
                      value="---- inSeq ---- = [RabbitMQProxySenderToMS2]"/>
         </log>
         <property name="OUT_ONLY" value="true" scope="default" type="STRING"/>
         <property name="FORCE_SC_ACCEPTED"
                   value="true"
                   scope="axis2"
                   type="STRING"/>
         <property name="MSG_BODY_IN" expression="$body/*[1]" type="OM"/>
         <log level="custom">
            <property name="[RabbitMQProxySenderToMS2] MSG_BODY_IN"
                      expression="$ctx:MSG_BODY_IN"/>
         </log>
         <store messageStore="MyRabbitMQStore"/>
      </inSequence>
   </target>
   <description>RabbitMQProxySenderToMS2 sends messages to MyRabbitMQStore message store (RabbitMQ)</description>
</proxy>
                               
                                                                                               
 
<!-- Sample Message for OM (valid for SOAP11 and SOAP12) -->
<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope" xmlns:echo="http://echo.services.core.carbon.wso2.org">
   <soap:Header/>
   <soap:Body>
      <echo:echoOMElement>
      <omEle><MyHTTPSC>202</MyHTTPSC><MyMessage>Hello RabbitMQ!</MyMessage></omEle>
      </echo:echoOMElement>
   </soap:Body>
</soap:Envelope>
 
<!-- MESSAGE PROCESSOR FORWARDING 2 (DeadLetter)-->
 
<messageProcessor class="org.apache.synapse.message.processor.impl.forwarder.ScheduledMessageForwardingProcessor"
                                                                name="RabbitMQMsgProcessorFwd2"
                                                                targetEndpoint="RabbitMQMsgProcessorEP2"
                                                                messageStore="MyRabbitMQStore">
  <parameter name="message.processor.reply.sequence">RabbitMQReplySequenceFwd2</parameter>
  <parameter name="client.retry.interval">7000</parameter>
  <parameter name="max.delivery.attempts">-1</parameter>
  <parameter name="interval">3000</parameter>
  <parameter name="non.retry.status.codes">416</parameter>
  <parameter name="message.processor.fault.sequence">RabbitMQFaultSequenceFwd2</parameter>
  <parameter name="is.active">true</parameter>
  <parameter name="cronExpression"></parameter>
</messageProcessor>
 
 
<!-- MESSAGE SAMPLING PROCESSOR 3 (DeadLetter)-->
 
<messageProcessor name="RabbitMQMsgSamplingProcessor3" class="org.apache.synapse.message.processor.impl.sampler.SamplingProcessor"
                  messageStore="MyRabbitMQStore" xmlns="http://ws.apache.org/ns/synapse">
   <parameter name="interval">5000</parameter>
   <parameter name="concurrency">1</parameter>
   <parameter name="sequence">RabbitMQSamplingSeq3</parameter>
   <parameter name="cronExpression">0 0/1 * 1/1 * ? *</parameter>
   <parameter name="is.active">false</parameter>
</messageProcessor>
                                                                                  
 
<!-- Backend EP2 (RabbitMQMsgProcessorEP2 to echoPassThroughProxy2) -->
<endpoint xmlns="http://ws.apache.org/ns/synapse" name="RabbitMQMsgProcessorEP2">
   <address uri="http://localhost:8290/services/echoPassThroughProxy2">
      <suspendOnFailure>
         <progressionFactor>1.0</progressionFactor>
      </suspendOnFailure>
      <markForSuspension>
         <retriesBeforeSuspension>0</retriesBeforeSuspension>
         <retryDelay>0</retryDelay>
      </markForSuspension>
   </address>
</endpoint>
 
<!-- echoPassThroughProxy2 -->
 
<?xml version="1.0" encoding="UTF-8"?>
<proxy xmlns="http://ws.apache.org/ns/synapse"
       name="echoPassThroughProxy2"
       transports="http"
       statistics="disable"
       trace="disable"
       startOnLoad="true">
   <target>
      <inSequence>
         <property name="BODY_IN"
                   expression="$body/*[1]"
                   scope="default"
                   type="OM"/>
         <property name="BODY_IN_VALUE"
                   expression="$body/*[1]/omEle"
                   scope="default"
                   type="OM"/>
         <property name="MY_HTTPSC_IN"
                   expression="$body/*[1]/omEle/MyHTTPSC"
                   scope="default"
                   type="STRING"/>
                                <property name="FORCE_ERROR_ON_SOAP_FAULT"
                   value="true"
                   scope="default"
                   type="STRING"
                   description="Set to 'true' if it is required to retry in case of SOAP fault."/>
         <log level="custom">
            <property name="[echoPassThroughProxy2]"
                      value="===== inSeq ===== [echoPassThroughProxy2]"/>
         </log>
         <log level="custom">
            <property name="[echoPassThroughProxy2] MY_HTTPSC_IN"
                      expression="$ctx:MY_HTTPSC_IN"/>
         </log>
         <log level="custom">
            <property name="[echoPassThroughProxy2] BODY_IN" expression="$ctx:BODY_IN"/>
         </log>
         <send>
            <endpoint>
               <address uri="http://localhost:9290/services/echo22222"/>
            </endpoint>
         </send>
      </inSequence>
      <outSequence>
         <property name="BODY_OUT_INI" expression="$body/*[1]" type="OM"/>
         <log level="custom">
            <property name="[echoPassThroughProxy2]"
                      value="===== outSeq ===== [echoPassThroughProxy2]"/>
         </log>
         <log level="custom">
            <property name="[echoPassThroughProxy2] $axis2:HTTP_SC"
                      expression="$axis2:HTTP_SC"/>
         </log>
         <log level="custom">
            <property name="[echoPassThroughProxy2] BODY_OUT_INI"
                      expression="$ctx:BODY_OUT_INI"/>
         </log>
         <switch source="$ctx:MY_HTTPSC_IN">
            <case regex="^211$">
               <log level="custom">
                  <property name="[echoPassThroughProxy2]"
                            value="Setting HTTP_SC=211 and Storing MSG in DL Queue !!!"/>
               </log>
               <payloadFactory media-type="xml">
                  <format>
                     <echo:echoOMElement xmlns:echo="http://echo.services.core.carbon.wso2.org">$1</echo:echoOMElement>
                  </format>
                  <args>
                     <arg evaluator="xml" expression="$ctx:BODY_IN_VALUE"/>
                  </args>
               </payloadFactory>
               <store messageStore="MyRabbitMQDeadLetterStore"/>
               <send/>
            </case>
            <default>
               <log level="custom">
                  <property name="[echoPassThroughProxy2]" value="Nothing to do. Send MSG to EP !"/>
               </log>
               <log level="custom">
                  <property name="[echoPassThroughProxy2] BODY_OUT_FIN" expression="$body"/>
               </log>
               <send/>
            </default>
         </switch>
      </outSequence>
      <faultSequence>
         <log level="custom">
            <property name="[FAULT SEQ IN PROXY]"
                      value="-------------------- = [FAULT SEQ IN PROXY]"/>
         </log>
         <log level="custom">
            <property name="[FAULT SEQ IN PROXY]"
                      value="FORCE_ERROR_ON_SOAP_FAULT if it is set to 'true', the SOAPFault is redirected to a fault sequence."/>
         </log>
         <log level="custom">
            <property name="[FAULT SEQ IN PROXY]"
                      value="FORCE_ERROR_ON_SOAP_FAULT sets to 'true' before of 'send' mediation if it is required to retry in case of SOAP fault.(?)"/>
         </log>
         <log level="custom">
            <property name="[FAULT SEQ IN PROXY]"
                      value="Mediation level issues, Endpoint or SOAPFault error found.Storing a copy of MSG in TroubleQueue"/>
         </log>
         <log level="custom">
            <property name="[FAULT SEQ IN PROXY]"
                      value="The Message in Broker/MessageStore will not be removed."/>
         </log>
         <log level="custom">
            <property name="[FAULT SEQ IN PROXY]"
                      value="You can perform any action, for example to store a copy of MSG in TroubleQueue."/>
         </log>
         <store messageStore="MyRabbitMQTroubleStore"/>
         <drop/>
      </faultSequence>
   </target>
   <description>echoPassThroughProxy2 passes message to echo Service and uses custom HTTP_SC</description>
</proxy>
 
<messageStore name="MyRabbitMQDeadLetterStore" class="uk.gov.hmrc.wso2.rabbitmq.message.store.impl.RabbitMQStore" xmlns="http://ws.apache.org/ns/synapse">
   <parameter name="java.naming.factory.initial">org.apache.qpid.jndi.PropertiesFileInitialContextFactory</parameter>
   <parameter name="java.naming.provider.url">repository/conf/jndi_rabbitmq.properties</parameter>
   <parameter name="store.jms.destinationPublisher">myJNDIRabbitMQDestQueueDLPublisher1</parameter>
   <parameter name="store.jms.destinationConsumer">myJNDIRabbitMQDestQueueDLConsumer1</parameter>
   <parameter name="store.jms.connection.factory">myRabbitMQDLConnFactory1</parameter>
   <parameter name="store.jms.username">admin</parameter>
   <parameter name="store.jms.password">JRq7b1Ct</parameter>
   <parameter name="store.jms.JMSSpecVersion">1.1</parameter>
</messageStore>
 
<messageStore name="MyRabbitMQTroubleStore" class="uk.gov.hmrc.wso2.rabbitmq.message.store.impl.RabbitMQStore" xmlns="http://ws.apache.org/ns/synapse">
   <parameter name="java.naming.factory.initial">org.apache.qpid.jndi.PropertiesFileInitialContextFactory</parameter>
   <parameter name="java.naming.provider.url">repository/conf/jndi_rabbitmq.properties</parameter>
   <parameter name="store.jms.destinationPublisher">myJNDIRabbitMQDestQueueDLPublisher2</parameter>
   <parameter name="store.jms.destinationConsumer">myJNDIRabbitMQDestQueueDLConsumer2</parameter>
   <parameter name="store.jms.connection.factory">myRabbitMQDLConnFactory2</parameter>
   <parameter name="store.jms.username">admin</parameter>
   <parameter name="store.jms.password">JRq7b1Ct</parameter>
   <parameter name="store.jms.JMSSpecVersion">1.1</parameter>
</messageStore>
 
<!-- Sequence to reply to Forwarding Processor -->
 
<!-- ReplySeq
 
**empty***
it is not necessary because OUT_ONLY=true
 
-->
 
<!-- FaultSeq  -->
<sequence xmlns="http://ws.apache.org/ns/synapse" name="RabbitMQFaultSequenceFwd2">
   <property xmlns:ns="http://org.apache.synapse/xsd" name="MSG_BODY" expression="$body/*[1]" type="OM"></property>
   <log level="custom">
      <property name="[RabbitMQ Fault Seq 2]" value="------ = [RabbitMQ Fault Seq 2]"></property>
   </log>
   <log level="custom">
      <property xmlns:ns="http://org.apache.synapse/xsd" name="[RabbitMQ Fault Seq 2] $axis2:HTTP_SC" expression="$axis2:HTTP_SC"></property>
   </log>
   <log level="custom">
      <property xmlns:ns="http://org.apache.synapse/xsd" name="[RabbitMQ Fault Seq 2] ERROR_CODE" expression="get-property('ERROR_CODE')"></property>
   </log>
   <log level="custom">
      <property xmlns:ns="http://org.apache.synapse/xsd" name="[RabbitMQ Fault Seq 2] ERROR_MESSAGE" expression="get-property('ERROR_MESSAGE')"></property>
   </log>
   <log level="custom">
      <property xmlns:ns="http://org.apache.synapse/xsd" name="[RabbitMQ Fault Seq 2] MSG_BODY" expression="$ctx:MSG_BODY"></property>
   </log>
   <log level="custom">
      <property name="[RabbitMQ Fault Seq 2]" value="Storing a copy of MSG in TroubleQueue"></property>
   </log>
   <axis2ns6:store xmlns:axis2ns6="http://ws.apache.org/ns/synapse" messageStore="MyRabbitMQTroubleStore"></axis2ns6:store>
</sequence>
 
 
<!-- Sampling Processor SEQUENCE  -->
 
<sequence xmlns="http://ws.apache.org/ns/synapse" name="RabbitMQSamplingSeq3" onError="RabbitMQFaultSequenceFwd2">
   <in>
      <property xmlns:ns="http://org.apache.synapse/xsd" name="MSG_BODY" expression="$body/*[1]" type="OM"></property>
      <property xmlns:ns="http://org.apache.synapse/xsd" name="BODY_IN_VALUE" expression="$body/*[1]/omEle" type="OM"></property>
      <property xmlns:ns="http://org.apache.synapse/xsd" name="MY_HTTPSC_IN" expression="$body/*[1]/omEle/MyHTTPSC" type="STRING"></property>
      <log level="custom">
         <property name="[RabbitMQSamplingSeq3]" value="== IN === = [RabbitMQSamplingSeq3]"></property>
      </log>
      <log level="custom">
         <property xmlns:ns="http://org.apache.synapse/xsd" name="[RabbitMQSamplingSeq3] MSG_BODY" expression="$ctx:MSG_BODY"></property>
      </log>
      <property name="FORCE_ERROR_ON_SOAP_FAULT" value="true" scope="default" type="STRING"></property>
      <send>
         <endpoint>
            <address uri="http://localhost:9290/services/echo22222"></address>
         </endpoint>
      </send>
   </in>
   <out>
      <log level="custom">
         <property name="[RabbitMQSamplingSeq3]" value="=== OUT == = [RabbitMQSamplingSeq3]"></property>
      </log>
      <send></send>
   </out>
</sequence>